/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MemgptSchemasOpenaiChatCompletionRequestToolCall from './MemgptSchemasOpenaiChatCompletionRequestToolCall';

/**
 * The AssistantMessageInput model module.
 * @module model/AssistantMessageInput
 * @version 0.1.0
 */
class AssistantMessageInput {
    /**
     * Constructs a new <code>AssistantMessageInput</code>.
     * @alias module:model/AssistantMessageInput
     */
    constructor() { 
        
        AssistantMessageInput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssistantMessageInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssistantMessageInput} obj Optional instance to populate.
     * @return {module:model/AssistantMessageInput} The populated <code>AssistantMessageInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssistantMessageInput();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tool_calls')) {
                obj['tool_calls'] = ApiClient.convertToType(data['tool_calls'], [MemgptSchemasOpenaiChatCompletionRequestToolCall]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssistantMessageInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssistantMessageInput</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['tool_calls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tool_calls'])) {
                throw new Error("Expected the field `tool_calls` to be an array in the JSON data but got " + data['tool_calls']);
            }
            // validate the optional field `tool_calls` (array)
            for (const item of data['tool_calls']) {
                MemgptSchemasOpenaiChatCompletionRequestToolCall.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} content
 */
AssistantMessageInput.prototype['content'] = undefined;

/**
 * @member {String} role
 * @default 'assistant'
 */
AssistantMessageInput.prototype['role'] = 'assistant';

/**
 * @member {String} name
 */
AssistantMessageInput.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/MemgptSchemasOpenaiChatCompletionRequestToolCall>} tool_calls
 */
AssistantMessageInput.prototype['tool_calls'] = undefined;






export default AssistantMessageInput;

