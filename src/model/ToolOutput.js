/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ToolOutput model module.
 * @module model/ToolOutput
 * @version 0.1.0
 */
class ToolOutput {
    /**
     * Constructs a new <code>ToolOutput</code>.
     * @alias module:model/ToolOutput
     * @param name {String} The name of the function.
     * @param tags {Array.<String>} Metadata tags.
     * @param sourceCode {String} The source code of the function.
     */
    constructor(name, tags, sourceCode) { 
        
        ToolOutput.initialize(this, name, tags, sourceCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, tags, sourceCode) { 
        obj['name'] = name;
        obj['tags'] = tags;
        obj['source_code'] = sourceCode;
    }

    /**
     * Constructs a <code>ToolOutput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ToolOutput} obj Optional instance to populate.
     * @return {module:model/ToolOutput} The populated <code>ToolOutput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ToolOutput();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('source_type')) {
                obj['source_type'] = ApiClient.convertToType(data['source_type'], 'String');
            }
            if (data.hasOwnProperty('module')) {
                obj['module'] = ApiClient.convertToType(data['module'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('source_code')) {
                obj['source_code'] = ApiClient.convertToType(data['source_code'], 'String');
            }
            if (data.hasOwnProperty('json_schema')) {
                obj['json_schema'] = ApiClient.convertToType(data['json_schema'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ToolOutput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ToolOutput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ToolOutput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['source_type'] && !(typeof data['source_type'] === 'string' || data['source_type'] instanceof String)) {
            throw new Error("Expected the field `source_type` to be a primitive type in the JSON string but got " + data['source_type']);
        }
        // ensure the json data is a string
        if (data['module'] && !(typeof data['module'] === 'string' || data['module'] instanceof String)) {
            throw new Error("Expected the field `module` to be a primitive type in the JSON string but got " + data['module']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['source_code'] && !(typeof data['source_code'] === 'string' || data['source_code'] instanceof String)) {
            throw new Error("Expected the field `source_code` to be a primitive type in the JSON string but got " + data['source_code']);
        }

        return true;
    }


}

ToolOutput.RequiredProperties = ["name", "tags", "source_code"];

/**
 * @member {String} description
 */
ToolOutput.prototype['description'] = undefined;

/**
 * @member {String} source_type
 */
ToolOutput.prototype['source_type'] = undefined;

/**
 * @member {String} module
 */
ToolOutput.prototype['module'] = undefined;

/**
 * @member {String} user_id
 */
ToolOutput.prototype['user_id'] = undefined;

/**
 * The human-friendly ID of the Tool
 * @member {String} id
 */
ToolOutput.prototype['id'] = undefined;

/**
 * The name of the function.
 * @member {String} name
 */
ToolOutput.prototype['name'] = undefined;

/**
 * Metadata tags.
 * @member {Array.<String>} tags
 */
ToolOutput.prototype['tags'] = undefined;

/**
 * The source code of the function.
 * @member {String} source_code
 */
ToolOutput.prototype['source_code'] = undefined;

/**
 * The JSON schema of the function.
 * @member {Object} json_schema
 */
ToolOutput.prototype['json_schema'] = undefined;






export default ToolOutput;

