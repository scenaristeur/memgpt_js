/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FunctionCallInput from './FunctionCallInput';

/**
 * The ToolFunctionChoice model module.
 * @module model/ToolFunctionChoice
 * @version 0.1.0
 */
class ToolFunctionChoice {
    /**
     * Constructs a new <code>ToolFunctionChoice</code>.
     * @alias module:model/ToolFunctionChoice
     * @param _function {module:model/FunctionCallInput} 
     */
    constructor(_function) { 
        
        ToolFunctionChoice.initialize(this, _function);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, _function) { 
        obj['function'] = _function;
    }

    /**
     * Constructs a <code>ToolFunctionChoice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ToolFunctionChoice} obj Optional instance to populate.
     * @return {module:model/ToolFunctionChoice} The populated <code>ToolFunctionChoice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ToolFunctionChoice();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('function')) {
                obj['function'] = FunctionCallInput.constructFromObject(data['function']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ToolFunctionChoice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ToolFunctionChoice</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ToolFunctionChoice.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `function`
        if (data['function']) { // data not null
          FunctionCallInput.validateJSON(data['function']);
        }

        return true;
    }


}

ToolFunctionChoice.RequiredProperties = ["function"];

/**
 * @member {module:model/ToolFunctionChoice.TypeEnum} type
 * @default 'function'
 */
ToolFunctionChoice.prototype['type'] = 'function';

/**
 * @member {module:model/FunctionCallInput} function
 */
ToolFunctionChoice.prototype['function'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ToolFunctionChoice['TypeEnum'] = {

    /**
     * value: "function"
     * @const
     */
    "function": "function"
};



export default ToolFunctionChoice;

