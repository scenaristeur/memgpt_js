/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OpenAIError from './OpenAIError';
import OpenAIUsage from './OpenAIUsage';
import StepDefaults from './StepDefaults';

/**
 * The OpenAIRunStep model module.
 * @module model/OpenAIRunStep
 * @version 0.1.0
 */
class OpenAIRunStep {
    /**
     * Constructs a new <code>OpenAIRunStep</code>.
     * @alias module:model/OpenAIRunStep
     * @param id {String} The unique identifier of the run step.
     * @param createdAt {Number} The unix timestamp of when the run step was created.
     * @param assistantId {String} The unique identifier of the assistant.
     * @param threadId {String} The unique identifier of the thread.
     * @param runId {String} The unique identifier of the run.
     * @param type {String} The type of the run step.
     * @param status {String} The status of the run step.
     * @param stepDefaults {module:model/StepDefaults} 
     */
    constructor(id, createdAt, assistantId, threadId, runId, type, status, stepDefaults) { 
        
        OpenAIRunStep.initialize(this, id, createdAt, assistantId, threadId, runId, type, status, stepDefaults);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, createdAt, assistantId, threadId, runId, type, status, stepDefaults) { 
        obj['id'] = id;
        obj['created_at'] = createdAt;
        obj['assistant_id'] = assistantId;
        obj['thread_id'] = threadId;
        obj['run_id'] = runId;
        obj['type'] = type;
        obj['status'] = status;
        obj['step_defaults'] = stepDefaults;
    }

    /**
     * Constructs a <code>OpenAIRunStep</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OpenAIRunStep} obj Optional instance to populate.
     * @return {module:model/OpenAIRunStep} The populated <code>OpenAIRunStep</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OpenAIRunStep();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('assistant_id')) {
                obj['assistant_id'] = ApiClient.convertToType(data['assistant_id'], 'String');
            }
            if (data.hasOwnProperty('thread_id')) {
                obj['thread_id'] = ApiClient.convertToType(data['thread_id'], 'String');
            }
            if (data.hasOwnProperty('run_id')) {
                obj['run_id'] = ApiClient.convertToType(data['run_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('step_defaults')) {
                obj['step_defaults'] = StepDefaults.constructFromObject(data['step_defaults']);
            }
            if (data.hasOwnProperty('last_error')) {
                obj['last_error'] = OpenAIError.constructFromObject(data['last_error']);
            }
            if (data.hasOwnProperty('expired_at')) {
                obj['expired_at'] = ApiClient.convertToType(data['expired_at'], 'Number');
            }
            if (data.hasOwnProperty('failed_at')) {
                obj['failed_at'] = ApiClient.convertToType(data['failed_at'], 'Number');
            }
            if (data.hasOwnProperty('completed_at')) {
                obj['completed_at'] = ApiClient.convertToType(data['completed_at'], 'Number');
            }
            if (data.hasOwnProperty('usage')) {
                obj['usage'] = OpenAIUsage.constructFromObject(data['usage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OpenAIRunStep</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OpenAIRunStep</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OpenAIRunStep.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['assistant_id'] && !(typeof data['assistant_id'] === 'string' || data['assistant_id'] instanceof String)) {
            throw new Error("Expected the field `assistant_id` to be a primitive type in the JSON string but got " + data['assistant_id']);
        }
        // ensure the json data is a string
        if (data['thread_id'] && !(typeof data['thread_id'] === 'string' || data['thread_id'] instanceof String)) {
            throw new Error("Expected the field `thread_id` to be a primitive type in the JSON string but got " + data['thread_id']);
        }
        // ensure the json data is a string
        if (data['run_id'] && !(typeof data['run_id'] === 'string' || data['run_id'] instanceof String)) {
            throw new Error("Expected the field `run_id` to be a primitive type in the JSON string but got " + data['run_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `step_defaults`
        if (data['step_defaults']) { // data not null
          StepDefaults.validateJSON(data['step_defaults']);
        }
        // validate the optional field `last_error`
        if (data['last_error']) { // data not null
          OpenAIError.validateJSON(data['last_error']);
        }
        // validate the optional field `usage`
        if (data['usage']) { // data not null
          OpenAIUsage.validateJSON(data['usage']);
        }

        return true;
    }


}

OpenAIRunStep.RequiredProperties = ["id", "created_at", "assistant_id", "thread_id", "run_id", "type", "status", "step_defaults"];

/**
 * The unique identifier of the run step.
 * @member {String} id
 */
OpenAIRunStep.prototype['id'] = undefined;

/**
 * @member {String} object
 * @default 'thread.run.step'
 */
OpenAIRunStep.prototype['object'] = 'thread.run.step';

/**
 * The unix timestamp of when the run step was created.
 * @member {Number} created_at
 */
OpenAIRunStep.prototype['created_at'] = undefined;

/**
 * The unique identifier of the assistant.
 * @member {String} assistant_id
 */
OpenAIRunStep.prototype['assistant_id'] = undefined;

/**
 * The unique identifier of the thread.
 * @member {String} thread_id
 */
OpenAIRunStep.prototype['thread_id'] = undefined;

/**
 * The unique identifier of the run.
 * @member {String} run_id
 */
OpenAIRunStep.prototype['run_id'] = undefined;

/**
 * The type of the run step.
 * @member {String} type
 */
OpenAIRunStep.prototype['type'] = undefined;

/**
 * The status of the run step.
 * @member {String} status
 */
OpenAIRunStep.prototype['status'] = undefined;

/**
 * @member {module:model/StepDefaults} step_defaults
 */
OpenAIRunStep.prototype['step_defaults'] = undefined;

/**
 * @member {module:model/OpenAIError} last_error
 */
OpenAIRunStep.prototype['last_error'] = undefined;

/**
 * @member {Number} expired_at
 */
OpenAIRunStep.prototype['expired_at'] = undefined;

/**
 * @member {Number} failed_at
 */
OpenAIRunStep.prototype['failed_at'] = undefined;

/**
 * @member {Number} completed_at
 */
OpenAIRunStep.prototype['completed_at'] = undefined;

/**
 * @member {module:model/OpenAIUsage} usage
 */
OpenAIRunStep.prototype['usage'] = undefined;






export default OpenAIRunStep;

