/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateToolRequest model module.
 * @module model/CreateToolRequest
 * @version 0.1.0
 */
class CreateToolRequest {
    /**
     * Constructs a new <code>CreateToolRequest</code>.
     * @alias module:model/CreateToolRequest
     * @param jsonSchema {Object} JSON schema of the tool.
     * @param sourceCode {String} The source code of the function.
     */
    constructor(jsonSchema, sourceCode) { 
        
        CreateToolRequest.initialize(this, jsonSchema, sourceCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, jsonSchema, sourceCode) { 
        obj['json_schema'] = jsonSchema;
        obj['source_code'] = sourceCode;
    }

    /**
     * Constructs a <code>CreateToolRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateToolRequest} obj Optional instance to populate.
     * @return {module:model/CreateToolRequest} The populated <code>CreateToolRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateToolRequest();

            if (data.hasOwnProperty('json_schema')) {
                obj['json_schema'] = ApiClient.convertToType(data['json_schema'], Object);
            }
            if (data.hasOwnProperty('source_code')) {
                obj['source_code'] = ApiClient.convertToType(data['source_code'], 'String');
            }
            if (data.hasOwnProperty('source_type')) {
                obj['source_type'] = ApiClient.convertToType(data['source_type'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateToolRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateToolRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateToolRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['source_code'] && !(typeof data['source_code'] === 'string' || data['source_code'] instanceof String)) {
            throw new Error("Expected the field `source_code` to be a primitive type in the JSON string but got " + data['source_code']);
        }
        // ensure the json data is a string
        if (data['source_type'] && !(typeof data['source_type'] === 'string' || data['source_type'] instanceof String)) {
            throw new Error("Expected the field `source_type` to be a primitive type in the JSON string but got " + data['source_type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

CreateToolRequest.RequiredProperties = ["json_schema", "source_code"];

/**
 * JSON schema of the tool.
 * @member {Object} json_schema
 */
CreateToolRequest.prototype['json_schema'] = undefined;

/**
 * The source code of the function.
 * @member {String} source_code
 */
CreateToolRequest.prototype['source_code'] = undefined;

/**
 * @member {module:model/CreateToolRequest.SourceTypeEnum} source_type
 */
CreateToolRequest.prototype['source_type'] = undefined;

/**
 * @member {Array.<String>} tags
 */
CreateToolRequest.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>source_type</code> property.
 * @enum {String}
 * @readonly
 */
CreateToolRequest['SourceTypeEnum'] = {

    /**
     * value: "python"
     * @const
     */
    "python": "python"
};



export default CreateToolRequest;

