/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ToolOutput from './ToolOutput';

/**
 * The ListToolsResponse model module.
 * @module model/ListToolsResponse
 * @version 0.1.0
 */
class ListToolsResponse {
    /**
     * Constructs a new <code>ListToolsResponse</code>.
     * @alias module:model/ListToolsResponse
     * @param tools {Array.<module:model/ToolOutput>} List of tools (functions).
     */
    constructor(tools) { 
        
        ListToolsResponse.initialize(this, tools);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tools) { 
        obj['tools'] = tools;
    }

    /**
     * Constructs a <code>ListToolsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListToolsResponse} obj Optional instance to populate.
     * @return {module:model/ListToolsResponse} The populated <code>ListToolsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListToolsResponse();

            if (data.hasOwnProperty('tools')) {
                obj['tools'] = ApiClient.convertToType(data['tools'], [ToolOutput]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListToolsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListToolsResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListToolsResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['tools']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tools'])) {
                throw new Error("Expected the field `tools` to be an array in the JSON data but got " + data['tools']);
            }
            // validate the optional field `tools` (array)
            for (const item of data['tools']) {
                ToolOutput.validateJSON(item);
            };
        }

        return true;
    }


}

ListToolsResponse.RequiredProperties = ["tools"];

/**
 * List of tools (functions).
 * @member {Array.<module:model/ToolOutput>} tools
 */
ListToolsResponse.prototype['tools'] = undefined;






export default ListToolsResponse;

