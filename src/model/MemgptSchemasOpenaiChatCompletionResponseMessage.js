/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MemgptSchemasOpenaiChatCompletionResponseFunctionCall from './MemgptSchemasOpenaiChatCompletionResponseFunctionCall';
import MemgptSchemasOpenaiChatCompletionResponseToolCall from './MemgptSchemasOpenaiChatCompletionResponseToolCall';

/**
 * The MemgptSchemasOpenaiChatCompletionResponseMessage model module.
 * @module model/MemgptSchemasOpenaiChatCompletionResponseMessage
 * @version 0.1.0
 */
class MemgptSchemasOpenaiChatCompletionResponseMessage {
    /**
     * Constructs a new <code>MemgptSchemasOpenaiChatCompletionResponseMessage</code>.
     * @alias module:model/MemgptSchemasOpenaiChatCompletionResponseMessage
     * @param role {String} 
     */
    constructor(role) { 
        
        MemgptSchemasOpenaiChatCompletionResponseMessage.initialize(this, role);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, role) { 
        obj['role'] = role;
    }

    /**
     * Constructs a <code>MemgptSchemasOpenaiChatCompletionResponseMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MemgptSchemasOpenaiChatCompletionResponseMessage} obj Optional instance to populate.
     * @return {module:model/MemgptSchemasOpenaiChatCompletionResponseMessage} The populated <code>MemgptSchemasOpenaiChatCompletionResponseMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MemgptSchemasOpenaiChatCompletionResponseMessage();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('tool_calls')) {
                obj['tool_calls'] = ApiClient.convertToType(data['tool_calls'], [MemgptSchemasOpenaiChatCompletionResponseToolCall]);
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('function_call')) {
                obj['function_call'] = MemgptSchemasOpenaiChatCompletionResponseFunctionCall.constructFromObject(data['function_call']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MemgptSchemasOpenaiChatCompletionResponseMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MemgptSchemasOpenaiChatCompletionResponseMessage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MemgptSchemasOpenaiChatCompletionResponseMessage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        if (data['tool_calls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tool_calls'])) {
                throw new Error("Expected the field `tool_calls` to be an array in the JSON data but got " + data['tool_calls']);
            }
            // validate the optional field `tool_calls` (array)
            for (const item of data['tool_calls']) {
                MemgptSchemasOpenaiChatCompletionResponseToolCall.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // validate the optional field `function_call`
        if (data['function_call']) { // data not null
          MemgptSchemasOpenaiChatCompletionResponseFunctionCall.validateJSON(data['function_call']);
        }

        return true;
    }


}

MemgptSchemasOpenaiChatCompletionResponseMessage.RequiredProperties = ["role"];

/**
 * @member {String} content
 */
MemgptSchemasOpenaiChatCompletionResponseMessage.prototype['content'] = undefined;

/**
 * @member {Array.<module:model/MemgptSchemasOpenaiChatCompletionResponseToolCall>} tool_calls
 */
MemgptSchemasOpenaiChatCompletionResponseMessage.prototype['tool_calls'] = undefined;

/**
 * @member {String} role
 */
MemgptSchemasOpenaiChatCompletionResponseMessage.prototype['role'] = undefined;

/**
 * @member {module:model/MemgptSchemasOpenaiChatCompletionResponseFunctionCall} function_call
 */
MemgptSchemasOpenaiChatCompletionResponseMessage.prototype['function_call'] = undefined;






export default MemgptSchemasOpenaiChatCompletionResponseMessage;

