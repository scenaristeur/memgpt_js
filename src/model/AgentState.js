/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbeddingConfig from './EmbeddingConfig';
import LLMConfig from './LLMConfig';
import Memory from './Memory';

/**
 * The AgentState model module.
 * @module model/AgentState
 * @version 0.1.0
 */
class AgentState {
    /**
     * Constructs a new <code>AgentState</code>.
     * Representation of an agent&#39;s state.
     * @alias module:model/AgentState
     * @param name {String} The name of the agent.
     * @param tools {Array.<String>} The tools used by the agent.
     * @param system {String} The system prompt used by the agent.
     * @param llmConfig {module:model/LLMConfig} The LLM configuration used by the agent.
     * @param embeddingConfig {module:model/EmbeddingConfig} The embedding configuration used by the agent.
     */
    constructor(name, tools, system, llmConfig, embeddingConfig) { 
        
        AgentState.initialize(this, name, tools, system, llmConfig, embeddingConfig);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, tools, system, llmConfig, embeddingConfig) { 
        obj['name'] = name;
        obj['tools'] = tools;
        obj['system'] = system;
        obj['llm_config'] = llmConfig;
        obj['embedding_config'] = embeddingConfig;
    }

    /**
     * Constructs a <code>AgentState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AgentState} obj Optional instance to populate.
     * @return {module:model/AgentState} The populated <code>AgentState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AgentState();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('metadata_')) {
                obj['metadata_'] = ApiClient.convertToType(data['metadata_'], Object);
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('message_ids')) {
                obj['message_ids'] = ApiClient.convertToType(data['message_ids'], ['String']);
            }
            if (data.hasOwnProperty('memory')) {
                obj['memory'] = ApiClient.convertToType(data['memory'], Memory);
            }
            if (data.hasOwnProperty('tools')) {
                obj['tools'] = ApiClient.convertToType(data['tools'], ['String']);
            }
            if (data.hasOwnProperty('system')) {
                obj['system'] = ApiClient.convertToType(data['system'], 'String');
            }
            if (data.hasOwnProperty('llm_config')) {
                obj['llm_config'] = ApiClient.convertToType(data['llm_config'], LLMConfig);
            }
            if (data.hasOwnProperty('embedding_config')) {
                obj['embedding_config'] = ApiClient.convertToType(data['embedding_config'], EmbeddingConfig);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AgentState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AgentState</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AgentState.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['message_ids'])) {
            throw new Error("Expected the field `message_ids` to be an array in the JSON data but got " + data['message_ids']);
        }
        // validate the optional field `memory`
        if (data['memory']) { // data not null
          Memory.validateJSON(data['memory']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tools'])) {
            throw new Error("Expected the field `tools` to be an array in the JSON data but got " + data['tools']);
        }
        // ensure the json data is a string
        if (data['system'] && !(typeof data['system'] === 'string' || data['system'] instanceof String)) {
            throw new Error("Expected the field `system` to be a primitive type in the JSON string but got " + data['system']);
        }
        // validate the optional field `llm_config`
        if (data['llm_config']) { // data not null
          LLMConfig.validateJSON(data['llm_config']);
        }
        // validate the optional field `embedding_config`
        if (data['embedding_config']) { // data not null
          EmbeddingConfig.validateJSON(data['embedding_config']);
        }

        return true;
    }


}

AgentState.RequiredProperties = ["name", "tools", "system", "llm_config", "embedding_config"];

/**
 * @member {String} description
 */
AgentState.prototype['description'] = undefined;

/**
 * @member {Object} metadata_
 */
AgentState.prototype['metadata_'] = undefined;

/**
 * @member {String} user_id
 */
AgentState.prototype['user_id'] = undefined;

/**
 * The human-friendly ID of the Agent
 * @member {String} id
 */
AgentState.prototype['id'] = undefined;

/**
 * The name of the agent.
 * @member {String} name
 */
AgentState.prototype['name'] = undefined;

/**
 * The datetime the agent was created.
 * @member {Date} created_at
 */
AgentState.prototype['created_at'] = undefined;

/**
 * @member {Array.<String>} message_ids
 */
AgentState.prototype['message_ids'] = undefined;

/**
 * The in-context memory of the agent.
 * @member {module:model/Memory} memory
 */
AgentState.prototype['memory'] = undefined;

/**
 * The tools used by the agent.
 * @member {Array.<String>} tools
 */
AgentState.prototype['tools'] = undefined;

/**
 * The system prompt used by the agent.
 * @member {String} system
 */
AgentState.prototype['system'] = undefined;

/**
 * The LLM configuration used by the agent.
 * @member {module:model/LLMConfig} llm_config
 */
AgentState.prototype['llm_config'] = undefined;

/**
 * The embedding configuration used by the agent.
 * @member {module:model/EmbeddingConfig} embedding_config
 */
AgentState.prototype['embedding_config'] = undefined;






export default AgentState;

