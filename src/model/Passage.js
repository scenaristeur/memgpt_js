/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbeddingConfig from './EmbeddingConfig';

/**
 * The Passage model module.
 * @module model/Passage
 * @version 0.1.0
 */
class Passage {
    /**
     * Constructs a new <code>Passage</code>.
     * @alias module:model/Passage
     * @param text {String} The text of the passage.
     * @param embedding {Array.<Number>} 
     * @param embeddingConfig {module:model/EmbeddingConfig} 
     */
    constructor(text, embedding, embeddingConfig) { 
        
        Passage.initialize(this, text, embedding, embeddingConfig);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, text, embedding, embeddingConfig) { 
        obj['text'] = text;
        obj['embedding'] = embedding;
        obj['embedding_config'] = embeddingConfig;
    }

    /**
     * Constructs a <code>Passage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Passage} obj Optional instance to populate.
     * @return {module:model/Passage} The populated <code>Passage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Passage();

            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('agent_id')) {
                obj['agent_id'] = ApiClient.convertToType(data['agent_id'], 'String');
            }
            if (data.hasOwnProperty('source_id')) {
                obj['source_id'] = ApiClient.convertToType(data['source_id'], 'String');
            }
            if (data.hasOwnProperty('doc_id')) {
                obj['doc_id'] = ApiClient.convertToType(data['doc_id'], 'String');
            }
            if (data.hasOwnProperty('metadata_')) {
                obj['metadata_'] = ApiClient.convertToType(data['metadata_'], Object);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('embedding')) {
                obj['embedding'] = ApiClient.convertToType(data['embedding'], ['Number']);
            }
            if (data.hasOwnProperty('embedding_config')) {
                obj['embedding_config'] = EmbeddingConfig.constructFromObject(data['embedding_config']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Passage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Passage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Passage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        // ensure the json data is a string
        if (data['agent_id'] && !(typeof data['agent_id'] === 'string' || data['agent_id'] instanceof String)) {
            throw new Error("Expected the field `agent_id` to be a primitive type in the JSON string but got " + data['agent_id']);
        }
        // ensure the json data is a string
        if (data['source_id'] && !(typeof data['source_id'] === 'string' || data['source_id'] instanceof String)) {
            throw new Error("Expected the field `source_id` to be a primitive type in the JSON string but got " + data['source_id']);
        }
        // ensure the json data is a string
        if (data['doc_id'] && !(typeof data['doc_id'] === 'string' || data['doc_id'] instanceof String)) {
            throw new Error("Expected the field `doc_id` to be a primitive type in the JSON string but got " + data['doc_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['embedding'])) {
            throw new Error("Expected the field `embedding` to be an array in the JSON data but got " + data['embedding']);
        }
        // validate the optional field `embedding_config`
        if (data['embedding_config']) { // data not null
          EmbeddingConfig.validateJSON(data['embedding_config']);
        }

        return true;
    }


}

Passage.RequiredProperties = ["text", "embedding", "embedding_config"];

/**
 * @member {String} user_id
 */
Passage.prototype['user_id'] = undefined;

/**
 * @member {String} agent_id
 */
Passage.prototype['agent_id'] = undefined;

/**
 * @member {String} source_id
 */
Passage.prototype['source_id'] = undefined;

/**
 * @member {String} doc_id
 */
Passage.prototype['doc_id'] = undefined;

/**
 * @member {Object} metadata_
 */
Passage.prototype['metadata_'] = undefined;

/**
 * The human-friendly ID of the Passage
 * @member {String} id
 */
Passage.prototype['id'] = undefined;

/**
 * The text of the passage.
 * @member {String} text
 */
Passage.prototype['text'] = undefined;

/**
 * @member {Array.<Number>} embedding
 */
Passage.prototype['embedding'] = undefined;

/**
 * @member {module:model/EmbeddingConfig} embedding_config
 */
Passage.prototype['embedding_config'] = undefined;

/**
 * The creation date of the passage.
 * @member {Date} created_at
 */
Passage.prototype['created_at'] = undefined;






export default Passage;

