/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OpenAIMessageContentInner from './OpenAIMessageContentInner';

/**
 * The OpenAIMessage model module.
 * @module model/OpenAIMessage
 * @version 0.1.0
 */
class OpenAIMessage {
    /**
     * Constructs a new <code>OpenAIMessage</code>.
     * @alias module:model/OpenAIMessage
     * @param id {String} The unique identifier of the message.
     * @param createdAt {Number} The unix timestamp of when the message was created.
     * @param threadId {String} The unique identifier of the thread.
     * @param role {String} Role of the message sender (either 'user' or 'system')
     * @param assistantId {String} The unique identifier of the assistant.
     */
    constructor(id, createdAt, threadId, role, assistantId) { 
        
        OpenAIMessage.initialize(this, id, createdAt, threadId, role, assistantId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, createdAt, threadId, role, assistantId) { 
        obj['id'] = id;
        obj['created_at'] = createdAt;
        obj['thread_id'] = threadId;
        obj['role'] = role;
        obj['assistant_id'] = assistantId;
    }

    /**
     * Constructs a <code>OpenAIMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OpenAIMessage} obj Optional instance to populate.
     * @return {module:model/OpenAIMessage} The populated <code>OpenAIMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OpenAIMessage();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('thread_id')) {
                obj['thread_id'] = ApiClient.convertToType(data['thread_id'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], [OpenAIMessageContentInner]);
            }
            if (data.hasOwnProperty('assistant_id')) {
                obj['assistant_id'] = ApiClient.convertToType(data['assistant_id'], 'String');
            }
            if (data.hasOwnProperty('run_id')) {
                obj['run_id'] = ApiClient.convertToType(data['run_id'], 'String');
            }
            if (data.hasOwnProperty('file_ids')) {
                obj['file_ids'] = ApiClient.convertToType(data['file_ids'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OpenAIMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OpenAIMessage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OpenAIMessage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // ensure the json data is a string
        if (data['thread_id'] && !(typeof data['thread_id'] === 'string' || data['thread_id'] instanceof String)) {
            throw new Error("Expected the field `thread_id` to be a primitive type in the JSON string but got " + data['thread_id']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        if (data['content']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['content'])) {
                throw new Error("Expected the field `content` to be an array in the JSON data but got " + data['content']);
            }
            // validate the optional field `content` (array)
            for (const item of data['content']) {
                OpenAIMessageContentInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['assistant_id'] && !(typeof data['assistant_id'] === 'string' || data['assistant_id'] instanceof String)) {
            throw new Error("Expected the field `assistant_id` to be a primitive type in the JSON string but got " + data['assistant_id']);
        }
        // ensure the json data is a string
        if (data['run_id'] && !(typeof data['run_id'] === 'string' || data['run_id'] instanceof String)) {
            throw new Error("Expected the field `run_id` to be a primitive type in the JSON string but got " + data['run_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['file_ids'])) {
            throw new Error("Expected the field `file_ids` to be an array in the JSON data but got " + data['file_ids']);
        }

        return true;
    }


}

OpenAIMessage.RequiredProperties = ["id", "created_at", "thread_id", "role", "assistant_id"];

/**
 * The unique identifier of the message.
 * @member {String} id
 */
OpenAIMessage.prototype['id'] = undefined;

/**
 * @member {String} object
 * @default 'thread.message'
 */
OpenAIMessage.prototype['object'] = 'thread.message';

/**
 * The unix timestamp of when the message was created.
 * @member {Number} created_at
 */
OpenAIMessage.prototype['created_at'] = undefined;

/**
 * The unique identifier of the thread.
 * @member {String} thread_id
 */
OpenAIMessage.prototype['thread_id'] = undefined;

/**
 * Role of the message sender (either 'user' or 'system')
 * @member {String} role
 */
OpenAIMessage.prototype['role'] = undefined;

/**
 * The message content to be processed by the agent.
 * @member {Array.<module:model/OpenAIMessageContentInner>} content
 */
OpenAIMessage.prototype['content'] = undefined;

/**
 * The unique identifier of the assistant.
 * @member {String} assistant_id
 */
OpenAIMessage.prototype['assistant_id'] = undefined;

/**
 * @member {String} run_id
 */
OpenAIMessage.prototype['run_id'] = undefined;

/**
 * @member {Array.<String>} file_ids
 */
OpenAIMessage.prototype['file_ids'] = undefined;

/**
 * @member {Object} metadata
 */
OpenAIMessage.prototype['metadata'] = undefined;






export default OpenAIMessage;

