/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MemgptSchemasOpenaiOpenaiToolCall from './MemgptSchemasOpenaiOpenaiToolCall';

/**
 * The CreateRunRequest model module.
 * @module model/CreateRunRequest
 * @version 0.1.0
 */
class CreateRunRequest {
    /**
     * Constructs a new <code>CreateRunRequest</code>.
     * @alias module:model/CreateRunRequest
     * @param assistantId {String} The unique identifier of the assistant.
     * @param instructions {String} The instructions for the run.
     */
    constructor(assistantId, instructions) { 
        
        CreateRunRequest.initialize(this, assistantId, instructions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assistantId, instructions) { 
        obj['assistant_id'] = assistantId;
        obj['instructions'] = instructions;
    }

    /**
     * Constructs a <code>CreateRunRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateRunRequest} obj Optional instance to populate.
     * @return {module:model/CreateRunRequest} The populated <code>CreateRunRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateRunRequest();

            if (data.hasOwnProperty('assistant_id')) {
                obj['assistant_id'] = ApiClient.convertToType(data['assistant_id'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('instructions')) {
                obj['instructions'] = ApiClient.convertToType(data['instructions'], 'String');
            }
            if (data.hasOwnProperty('additional_instructions')) {
                obj['additional_instructions'] = ApiClient.convertToType(data['additional_instructions'], 'String');
            }
            if (data.hasOwnProperty('tools')) {
                obj['tools'] = ApiClient.convertToType(data['tools'], [MemgptSchemasOpenaiOpenaiToolCall]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateRunRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateRunRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateRunRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['assistant_id'] && !(typeof data['assistant_id'] === 'string' || data['assistant_id'] instanceof String)) {
            throw new Error("Expected the field `assistant_id` to be a primitive type in the JSON string but got " + data['assistant_id']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['instructions'] && !(typeof data['instructions'] === 'string' || data['instructions'] instanceof String)) {
            throw new Error("Expected the field `instructions` to be a primitive type in the JSON string but got " + data['instructions']);
        }
        // ensure the json data is a string
        if (data['additional_instructions'] && !(typeof data['additional_instructions'] === 'string' || data['additional_instructions'] instanceof String)) {
            throw new Error("Expected the field `additional_instructions` to be a primitive type in the JSON string but got " + data['additional_instructions']);
        }
        if (data['tools']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tools'])) {
                throw new Error("Expected the field `tools` to be an array in the JSON data but got " + data['tools']);
            }
            // validate the optional field `tools` (array)
            for (const item of data['tools']) {
                MemgptSchemasOpenaiOpenaiToolCall.validateJSON(item);
            };
        }

        return true;
    }


}

CreateRunRequest.RequiredProperties = ["assistant_id", "instructions"];

/**
 * The unique identifier of the assistant.
 * @member {String} assistant_id
 */
CreateRunRequest.prototype['assistant_id'] = undefined;

/**
 * @member {String} model
 */
CreateRunRequest.prototype['model'] = undefined;

/**
 * The instructions for the run.
 * @member {String} instructions
 */
CreateRunRequest.prototype['instructions'] = undefined;

/**
 * @member {String} additional_instructions
 */
CreateRunRequest.prototype['additional_instructions'] = undefined;

/**
 * @member {Array.<module:model/MemgptSchemasOpenaiOpenaiToolCall>} tools
 */
CreateRunRequest.prototype['tools'] = undefined;

/**
 * @member {Object} metadata
 */
CreateRunRequest.prototype['metadata'] = undefined;






export default CreateRunRequest;

