/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MemgptSchemasOpenaiChatCompletionsToolCall from './MemgptSchemasOpenaiChatCompletionsToolCall';
import MessageRole from './MessageRole';

/**
 * The MemgptSchemasMessageMessage model module.
 * @module model/MemgptSchemasMessageMessage
 * @version 0.1.0
 */
class MemgptSchemasMessageMessage {
    /**
     * Constructs a new <code>MemgptSchemasMessageMessage</code>.
     * Representation of a message sent.  Messages can be: - agent-&gt;user (role&#x3D;&#x3D;&#39;agent&#39;) - user-&gt;agent and system-&gt;agent (role&#x3D;&#x3D;&#39;user&#39;) - or function/tool call returns (role&#x3D;&#x3D;&#39;function&#39;/&#39;tool&#39;).
     * @alias module:model/MemgptSchemasMessageMessage
     * @param role {module:model/MessageRole} The role of the participant.
     */
    constructor(role) { 
        
        MemgptSchemasMessageMessage.initialize(this, role);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, role) { 
        obj['role'] = role;
    }

    /**
     * Constructs a <code>MemgptSchemasMessageMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MemgptSchemasMessageMessage} obj Optional instance to populate.
     * @return {module:model/MemgptSchemasMessageMessage} The populated <code>MemgptSchemasMessageMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MemgptSchemasMessageMessage();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], MessageRole);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('agent_id')) {
                obj['agent_id'] = ApiClient.convertToType(data['agent_id'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('tool_calls')) {
                obj['tool_calls'] = ApiClient.convertToType(data['tool_calls'], [MemgptSchemasOpenaiChatCompletionsToolCall]);
            }
            if (data.hasOwnProperty('tool_call_id')) {
                obj['tool_call_id'] = ApiClient.convertToType(data['tool_call_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MemgptSchemasMessageMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MemgptSchemasMessageMessage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MemgptSchemasMessageMessage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        // ensure the json data is a string
        if (data['agent_id'] && !(typeof data['agent_id'] === 'string' || data['agent_id'] instanceof String)) {
            throw new Error("Expected the field `agent_id` to be a primitive type in the JSON string but got " + data['agent_id']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['tool_calls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tool_calls'])) {
                throw new Error("Expected the field `tool_calls` to be an array in the JSON data but got " + data['tool_calls']);
            }
            // validate the optional field `tool_calls` (array)
            for (const item of data['tool_calls']) {
                MemgptSchemasOpenaiChatCompletionsToolCall.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['tool_call_id'] && !(typeof data['tool_call_id'] === 'string' || data['tool_call_id'] instanceof String)) {
            throw new Error("Expected the field `tool_call_id` to be a primitive type in the JSON string but got " + data['tool_call_id']);
        }

        return true;
    }


}

MemgptSchemasMessageMessage.RequiredProperties = ["role"];

/**
 * The human-friendly ID of the Message
 * @member {String} id
 */
MemgptSchemasMessageMessage.prototype['id'] = undefined;

/**
 * The role of the participant.
 * @member {module:model/MessageRole} role
 */
MemgptSchemasMessageMessage.prototype['role'] = undefined;

/**
 * @member {String} text
 */
MemgptSchemasMessageMessage.prototype['text'] = undefined;

/**
 * @member {String} user_id
 */
MemgptSchemasMessageMessage.prototype['user_id'] = undefined;

/**
 * @member {String} agent_id
 */
MemgptSchemasMessageMessage.prototype['agent_id'] = undefined;

/**
 * @member {String} model
 */
MemgptSchemasMessageMessage.prototype['model'] = undefined;

/**
 * @member {String} name
 */
MemgptSchemasMessageMessage.prototype['name'] = undefined;

/**
 * The time the message was created.
 * @member {Date} created_at
 */
MemgptSchemasMessageMessage.prototype['created_at'] = undefined;

/**
 * @member {Array.<module:model/MemgptSchemasOpenaiChatCompletionsToolCall>} tool_calls
 */
MemgptSchemasMessageMessage.prototype['tool_calls'] = undefined;

/**
 * @member {String} tool_call_id
 */
MemgptSchemasMessageMessage.prototype['tool_call_id'] = undefined;






export default MemgptSchemasMessageMessage;

