/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChatCompletionRequestMessagesInner from './ChatCompletionRequestMessagesInner';
import FunctionCall from './FunctionCall';
import FunctionSchema from './FunctionSchema';
import ResponseFormat from './ResponseFormat';
import Stop from './Stop';
import ToolChoice from './ToolChoice';
import ToolInput from './ToolInput';

/**
 * The ChatCompletionRequest model module.
 * @module model/ChatCompletionRequest
 * @version 0.1.0
 */
class ChatCompletionRequest {
    /**
     * Constructs a new <code>ChatCompletionRequest</code>.
     * https://platform.openai.com/docs/api-reference/chat/create
     * @alias module:model/ChatCompletionRequest
     * @param model {String} 
     * @param messages {Array.<module:model/ChatCompletionRequestMessagesInner>} 
     */
    constructor(model, messages) { 
        
        ChatCompletionRequest.initialize(this, model, messages);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, model, messages) { 
        obj['model'] = model;
        obj['messages'] = messages;
    }

    /**
     * Constructs a <code>ChatCompletionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatCompletionRequest} obj Optional instance to populate.
     * @return {module:model/ChatCompletionRequest} The populated <code>ChatCompletionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatCompletionRequest();

            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('messages')) {
                obj['messages'] = ApiClient.convertToType(data['messages'], [ChatCompletionRequestMessagesInner]);
            }
            if (data.hasOwnProperty('frequency_penalty')) {
                obj['frequency_penalty'] = ApiClient.convertToType(data['frequency_penalty'], 'Number');
            }
            if (data.hasOwnProperty('logit_bias')) {
                obj['logit_bias'] = ApiClient.convertToType(data['logit_bias'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('logprobs')) {
                obj['logprobs'] = ApiClient.convertToType(data['logprobs'], 'Boolean');
            }
            if (data.hasOwnProperty('top_logprobs')) {
                obj['top_logprobs'] = ApiClient.convertToType(data['top_logprobs'], 'Number');
            }
            if (data.hasOwnProperty('max_tokens')) {
                obj['max_tokens'] = ApiClient.convertToType(data['max_tokens'], 'Number');
            }
            if (data.hasOwnProperty('n')) {
                obj['n'] = ApiClient.convertToType(data['n'], 'Number');
            }
            if (data.hasOwnProperty('presence_penalty')) {
                obj['presence_penalty'] = ApiClient.convertToType(data['presence_penalty'], 'Number');
            }
            if (data.hasOwnProperty('response_format')) {
                obj['response_format'] = ResponseFormat.constructFromObject(data['response_format']);
            }
            if (data.hasOwnProperty('seed')) {
                obj['seed'] = ApiClient.convertToType(data['seed'], 'Number');
            }
            if (data.hasOwnProperty('stop')) {
                obj['stop'] = Stop.constructFromObject(data['stop']);
            }
            if (data.hasOwnProperty('stream')) {
                obj['stream'] = ApiClient.convertToType(data['stream'], 'Boolean');
            }
            if (data.hasOwnProperty('temperature')) {
                obj['temperature'] = ApiClient.convertToType(data['temperature'], 'Number');
            }
            if (data.hasOwnProperty('top_p')) {
                obj['top_p'] = ApiClient.convertToType(data['top_p'], 'Number');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('tools')) {
                obj['tools'] = ApiClient.convertToType(data['tools'], [ToolInput]);
            }
            if (data.hasOwnProperty('tool_choice')) {
                obj['tool_choice'] = ToolChoice.constructFromObject(data['tool_choice']);
            }
            if (data.hasOwnProperty('functions')) {
                obj['functions'] = ApiClient.convertToType(data['functions'], [FunctionSchema]);
            }
            if (data.hasOwnProperty('function_call')) {
                obj['function_call'] = FunctionCall.constructFromObject(data['function_call']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatCompletionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatCompletionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChatCompletionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        if (data['messages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messages'])) {
                throw new Error("Expected the field `messages` to be an array in the JSON data but got " + data['messages']);
            }
            // validate the optional field `messages` (array)
            for (const item of data['messages']) {
                ChatCompletionRequestMessagesInner.validateJSON(item);
            };
        }
        // validate the optional field `response_format`
        if (data['response_format']) { // data not null
          ResponseFormat.validateJSON(data['response_format']);
        }
        // validate the optional field `stop`
        if (data['stop']) { // data not null
          Stop.validateJSON(data['stop']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }
        if (data['tools']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tools'])) {
                throw new Error("Expected the field `tools` to be an array in the JSON data but got " + data['tools']);
            }
            // validate the optional field `tools` (array)
            for (const item of data['tools']) {
                ToolInput.validateJSON(item);
            };
        }
        // validate the optional field `tool_choice`
        if (data['tool_choice']) { // data not null
          ToolChoice.validateJSON(data['tool_choice']);
        }
        if (data['functions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['functions'])) {
                throw new Error("Expected the field `functions` to be an array in the JSON data but got " + data['functions']);
            }
            // validate the optional field `functions` (array)
            for (const item of data['functions']) {
                FunctionSchema.validateJSON(item);
            };
        }
        // validate the optional field `function_call`
        if (data['function_call']) { // data not null
          FunctionCall.validateJSON(data['function_call']);
        }

        return true;
    }


}

ChatCompletionRequest.RequiredProperties = ["model", "messages"];

/**
 * @member {String} model
 */
ChatCompletionRequest.prototype['model'] = undefined;

/**
 * @member {Array.<module:model/ChatCompletionRequestMessagesInner>} messages
 */
ChatCompletionRequest.prototype['messages'] = undefined;

/**
 * @member {Number} frequency_penalty
 */
ChatCompletionRequest.prototype['frequency_penalty'] = undefined;

/**
 * @member {Object.<String, Number>} logit_bias
 */
ChatCompletionRequest.prototype['logit_bias'] = undefined;

/**
 * @member {Boolean} logprobs
 */
ChatCompletionRequest.prototype['logprobs'] = undefined;

/**
 * @member {Number} top_logprobs
 */
ChatCompletionRequest.prototype['top_logprobs'] = undefined;

/**
 * @member {Number} max_tokens
 */
ChatCompletionRequest.prototype['max_tokens'] = undefined;

/**
 * @member {Number} n
 */
ChatCompletionRequest.prototype['n'] = undefined;

/**
 * @member {Number} presence_penalty
 */
ChatCompletionRequest.prototype['presence_penalty'] = undefined;

/**
 * @member {module:model/ResponseFormat} response_format
 */
ChatCompletionRequest.prototype['response_format'] = undefined;

/**
 * @member {Number} seed
 */
ChatCompletionRequest.prototype['seed'] = undefined;

/**
 * @member {module:model/Stop} stop
 */
ChatCompletionRequest.prototype['stop'] = undefined;

/**
 * @member {Boolean} stream
 */
ChatCompletionRequest.prototype['stream'] = undefined;

/**
 * @member {Number} temperature
 */
ChatCompletionRequest.prototype['temperature'] = undefined;

/**
 * @member {Number} top_p
 */
ChatCompletionRequest.prototype['top_p'] = undefined;

/**
 * @member {String} user
 */
ChatCompletionRequest.prototype['user'] = undefined;

/**
 * @member {Array.<module:model/ToolInput>} tools
 */
ChatCompletionRequest.prototype['tools'] = undefined;

/**
 * @member {module:model/ToolChoice} tool_choice
 */
ChatCompletionRequest.prototype['tool_choice'] = undefined;

/**
 * @member {Array.<module:model/FunctionSchema>} functions
 */
ChatCompletionRequest.prototype['functions'] = undefined;

/**
 * @member {module:model/FunctionCall} function_call
 */
ChatCompletionRequest.prototype['function_call'] = undefined;






export default ChatCompletionRequest;

