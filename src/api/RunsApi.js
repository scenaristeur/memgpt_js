/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateRunRequest from '../model/CreateRunRequest';
import CreateThreadRunRequest from '../model/CreateThreadRunRequest';
import HTTPValidationError from '../model/HTTPValidationError';
import ModifyRunRequest from '../model/ModifyRunRequest';
import OpenAIRun from '../model/OpenAIRun';
import OpenAIRunStep from '../model/OpenAIRunStep';
import SubmitToolOutputsToRunRequest from '../model/SubmitToolOutputsToRunRequest';

/**
* Runs service.
* @module api/RunsApi
* @version 0.1.0
*/
export default class RunsApi {

    /**
    * Constructs a new RunsApi. 
    * @alias module:api/RunsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelRunV1ThreadsThreadIdRunsRunIdCancelPost operation.
     * @callback module:api/RunsApi~cancelRunV1ThreadsThreadIdRunsRunIdCancelPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAIRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Run
     * @param {String} threadId The unique identifier of the thread.
     * @param {String} runId The unique identifier of the run.
     * @param {module:api/RunsApi~cancelRunV1ThreadsThreadIdRunsRunIdCancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAIRun}
     */
    cancelRunV1ThreadsThreadIdRunsRunIdCancelPost(threadId, runId, callback) {
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling cancelRunV1ThreadsThreadIdRunsRunIdCancelPost");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling cancelRunV1ThreadsThreadIdRunsRunIdCancelPost");
      }

      let pathParams = {
        'thread_id': threadId,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAIRun;
      return this.apiClient.callApi(
        '/v1/threads/{thread_id}/runs/{run_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRunV1ThreadsThreadIdRunsPost operation.
     * @callback module:api/RunsApi~createRunV1ThreadsThreadIdRunsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAIRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Run
     * @param {String} threadId The unique identifier of the thread.
     * @param {module:model/CreateRunRequest} createRunRequest 
     * @param {module:api/RunsApi~createRunV1ThreadsThreadIdRunsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAIRun}
     */
    createRunV1ThreadsThreadIdRunsPost(threadId, createRunRequest, callback) {
      let postBody = createRunRequest;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling createRunV1ThreadsThreadIdRunsPost");
      }
      // verify the required parameter 'createRunRequest' is set
      if (createRunRequest === undefined || createRunRequest === null) {
        throw new Error("Missing the required parameter 'createRunRequest' when calling createRunV1ThreadsThreadIdRunsPost");
      }

      let pathParams = {
        'thread_id': threadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OpenAIRun;
      return this.apiClient.callApi(
        '/v1/threads/{thread_id}/runs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createThreadAndRunV1ThreadsRunsPost operation.
     * @callback module:api/RunsApi~createThreadAndRunV1ThreadsRunsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAIRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Thread And Run
     * @param {module:model/CreateThreadRunRequest} createThreadRunRequest 
     * @param {module:api/RunsApi~createThreadAndRunV1ThreadsRunsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAIRun}
     */
    createThreadAndRunV1ThreadsRunsPost(createThreadRunRequest, callback) {
      let postBody = createThreadRunRequest;
      // verify the required parameter 'createThreadRunRequest' is set
      if (createThreadRunRequest === undefined || createThreadRunRequest === null) {
        throw new Error("Missing the required parameter 'createThreadRunRequest' when calling createThreadAndRunV1ThreadsRunsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OpenAIRun;
      return this.apiClient.callApi(
        '/v1/threads/runs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRunStepsV1ThreadsThreadIdRunsRunIdStepsGet operation.
     * @callback module:api/RunsApi~listRunStepsV1ThreadsThreadIdRunsRunIdStepsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OpenAIRunStep>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Run Steps
     * @param {String} threadId The unique identifier of the thread.
     * @param {String} runId The unique identifier of the run.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 1000)] How many run steps to retrieve.
     * @param {String} [order = 'asc')] Order of run steps to retrieve (either 'asc' or 'desc').
     * @param {String} [after] A cursor for use in pagination. `after` is an object ID that defines your place in the list.
     * @param {String} [before] A cursor for use in pagination. `after` is an object ID that defines your place in the list.
     * @param {module:api/RunsApi~listRunStepsV1ThreadsThreadIdRunsRunIdStepsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OpenAIRunStep>}
     */
    listRunStepsV1ThreadsThreadIdRunsRunIdStepsGet(threadId, runId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling listRunStepsV1ThreadsThreadIdRunsRunIdStepsGet");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling listRunStepsV1ThreadsThreadIdRunsRunIdStepsGet");
      }

      let pathParams = {
        'thread_id': threadId,
        'run_id': runId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'after': opts['after'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OpenAIRunStep];
      return this.apiClient.callApi(
        '/v1/threads/{thread_id}/runs/{run_id}/steps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRunsV1ThreadsThreadIdRunsGet operation.
     * @callback module:api/RunsApi~listRunsV1ThreadsThreadIdRunsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OpenAIRun>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Runs
     * @param {String} threadId The unique identifier of the thread.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 1000)] How many runs to retrieve.
     * @param {String} [order = 'asc')] Order of runs to retrieve (either 'asc' or 'desc').
     * @param {String} [after] A cursor for use in pagination. `after` is an object ID that defines your place in the list.
     * @param {String} [before] A cursor for use in pagination. `after` is an object ID that defines your place in the list.
     * @param {module:api/RunsApi~listRunsV1ThreadsThreadIdRunsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OpenAIRun>}
     */
    listRunsV1ThreadsThreadIdRunsGet(threadId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling listRunsV1ThreadsThreadIdRunsGet");
      }

      let pathParams = {
        'thread_id': threadId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'after': opts['after'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OpenAIRun];
      return this.apiClient.callApi(
        '/v1/threads/{thread_id}/runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyRunV1ThreadsThreadIdRunsRunIdPost operation.
     * @callback module:api/RunsApi~modifyRunV1ThreadsThreadIdRunsRunIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAIRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify Run
     * @param {String} threadId The unique identifier of the thread.
     * @param {String} runId The unique identifier of the run.
     * @param {module:model/ModifyRunRequest} modifyRunRequest 
     * @param {module:api/RunsApi~modifyRunV1ThreadsThreadIdRunsRunIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAIRun}
     */
    modifyRunV1ThreadsThreadIdRunsRunIdPost(threadId, runId, modifyRunRequest, callback) {
      let postBody = modifyRunRequest;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling modifyRunV1ThreadsThreadIdRunsRunIdPost");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling modifyRunV1ThreadsThreadIdRunsRunIdPost");
      }
      // verify the required parameter 'modifyRunRequest' is set
      if (modifyRunRequest === undefined || modifyRunRequest === null) {
        throw new Error("Missing the required parameter 'modifyRunRequest' when calling modifyRunV1ThreadsThreadIdRunsRunIdPost");
      }

      let pathParams = {
        'thread_id': threadId,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OpenAIRun;
      return this.apiClient.callApi(
        '/v1/threads/{thread_id}/runs/{run_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveRunStepV1ThreadsThreadIdRunsRunIdStepsStepIdGet operation.
     * @callback module:api/RunsApi~retrieveRunStepV1ThreadsThreadIdRunsRunIdStepsStepIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAIRunStep} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Run Step
     * @param {String} threadId The unique identifier of the thread.
     * @param {String} runId The unique identifier of the run.
     * @param {String} stepId The unique identifier of the run step.
     * @param {module:api/RunsApi~retrieveRunStepV1ThreadsThreadIdRunsRunIdStepsStepIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAIRunStep}
     */
    retrieveRunStepV1ThreadsThreadIdRunsRunIdStepsStepIdGet(threadId, runId, stepId, callback) {
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling retrieveRunStepV1ThreadsThreadIdRunsRunIdStepsStepIdGet");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling retrieveRunStepV1ThreadsThreadIdRunsRunIdStepsStepIdGet");
      }
      // verify the required parameter 'stepId' is set
      if (stepId === undefined || stepId === null) {
        throw new Error("Missing the required parameter 'stepId' when calling retrieveRunStepV1ThreadsThreadIdRunsRunIdStepsStepIdGet");
      }

      let pathParams = {
        'thread_id': threadId,
        'run_id': runId,
        'step_id': stepId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAIRunStep;
      return this.apiClient.callApi(
        '/v1/threads/{thread_id}/runs/{run_id}/steps/{step_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveRunV1ThreadsThreadIdRunsRunIdGet operation.
     * @callback module:api/RunsApi~retrieveRunV1ThreadsThreadIdRunsRunIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAIRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Run
     * @param {String} threadId The unique identifier of the thread.
     * @param {String} runId The unique identifier of the run.
     * @param {module:api/RunsApi~retrieveRunV1ThreadsThreadIdRunsRunIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAIRun}
     */
    retrieveRunV1ThreadsThreadIdRunsRunIdGet(threadId, runId, callback) {
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling retrieveRunV1ThreadsThreadIdRunsRunIdGet");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling retrieveRunV1ThreadsThreadIdRunsRunIdGet");
      }

      let pathParams = {
        'thread_id': threadId,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAIRun;
      return this.apiClient.callApi(
        '/v1/threads/{thread_id}/runs/{run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitToolOutputsToRunV1ThreadsThreadIdRunsRunIdSubmitToolOutputsPost operation.
     * @callback module:api/RunsApi~submitToolOutputsToRunV1ThreadsThreadIdRunsRunIdSubmitToolOutputsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAIRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit Tool Outputs To Run
     * @param {String} threadId The unique identifier of the thread.
     * @param {String} runId The unique identifier of the run.
     * @param {module:model/SubmitToolOutputsToRunRequest} submitToolOutputsToRunRequest 
     * @param {module:api/RunsApi~submitToolOutputsToRunV1ThreadsThreadIdRunsRunIdSubmitToolOutputsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAIRun}
     */
    submitToolOutputsToRunV1ThreadsThreadIdRunsRunIdSubmitToolOutputsPost(threadId, runId, submitToolOutputsToRunRequest, callback) {
      let postBody = submitToolOutputsToRunRequest;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling submitToolOutputsToRunV1ThreadsThreadIdRunsRunIdSubmitToolOutputsPost");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling submitToolOutputsToRunV1ThreadsThreadIdRunsRunIdSubmitToolOutputsPost");
      }
      // verify the required parameter 'submitToolOutputsToRunRequest' is set
      if (submitToolOutputsToRunRequest === undefined || submitToolOutputsToRunRequest === null) {
        throw new Error("Missing the required parameter 'submitToolOutputsToRunRequest' when calling submitToolOutputsToRunV1ThreadsThreadIdRunsRunIdSubmitToolOutputsPost");
      }

      let pathParams = {
        'thread_id': threadId,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OpenAIRun;
      return this.apiClient.callApi(
        '/v1/threads/{thread_id}/runs/{run_id}/submit_tool_outputs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
