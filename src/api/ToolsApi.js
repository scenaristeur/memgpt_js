/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateToolRequest from '../model/CreateToolRequest';
import HTTPValidationError from '../model/HTTPValidationError';
import ListToolsResponse from '../model/ListToolsResponse';
import ToolCreate from '../model/ToolCreate';
import ToolOutput from '../model/ToolOutput';
import ToolUpdate from '../model/ToolUpdate';

/**
* Tools service.
* @module api/ToolsApi
* @version 0.1.0
*/
export default class ToolsApi {

    /**
    * Constructs a new ToolsApi. 
    * @alias module:api/ToolsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createToolAdminToolsPost operation.
     * @callback module:api/ToolsApi~createToolAdminToolsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ToolOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Tool
     * Create a new tool
     * @param {module:model/CreateToolRequest} createToolRequest 
     * @param {module:api/ToolsApi~createToolAdminToolsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ToolOutput}
     */
    createToolAdminToolsPost(createToolRequest, callback) {
      let postBody = createToolRequest;
      // verify the required parameter 'createToolRequest' is set
      if (createToolRequest === undefined || createToolRequest === null) {
        throw new Error("Missing the required parameter 'createToolRequest' when calling createToolAdminToolsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ToolOutput;
      return this.apiClient.callApi(
        '/admin/tools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createToolApiToolsPost operation.
     * @callback module:api/ToolsApi~createToolApiToolsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ToolOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Tool
     * Create a new tool
     * @param {module:model/ToolCreate} toolCreate 
     * @param {module:api/ToolsApi~createToolApiToolsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ToolOutput}
     */
    createToolApiToolsPost(toolCreate, callback) {
      let postBody = toolCreate;
      // verify the required parameter 'toolCreate' is set
      if (toolCreate === undefined || toolCreate === null) {
        throw new Error("Missing the required parameter 'toolCreate' when calling createToolApiToolsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ToolOutput;
      return this.apiClient.callApi(
        '/api/tools', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteToolAdminToolsToolNameDelete operation.
     * @callback module:api/ToolsApi~deleteToolAdminToolsToolNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Tool
     * Delete a tool by name
     * @param {String} toolName 
     * @param {module:api/ToolsApi~deleteToolAdminToolsToolNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteToolAdminToolsToolNameDelete(toolName, callback) {
      let postBody = null;
      // verify the required parameter 'toolName' is set
      if (toolName === undefined || toolName === null) {
        throw new Error("Missing the required parameter 'toolName' when calling deleteToolAdminToolsToolNameDelete");
      }

      let pathParams = {
        'tool_name': toolName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/admin/tools/{tool_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteToolApiToolsToolIdDelete operation.
     * @callback module:api/ToolsApi~deleteToolApiToolsToolIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Tool
     * Delete a tool by name
     * @param {String} toolId 
     * @param {module:api/ToolsApi~deleteToolApiToolsToolIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteToolApiToolsToolIdDelete(toolId, callback) {
      let postBody = null;
      // verify the required parameter 'toolId' is set
      if (toolId === undefined || toolId === null) {
        throw new Error("Missing the required parameter 'toolId' when calling deleteToolApiToolsToolIdDelete");
      }

      let pathParams = {
        'tool_id': toolId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/tools/{tool_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getToolAdminToolsToolNameGet operation.
     * @callback module:api/ToolsApi~getToolAdminToolsToolNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ToolOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Tool
     * Get a tool by name
     * @param {String} toolName 
     * @param {module:api/ToolsApi~getToolAdminToolsToolNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ToolOutput}
     */
    getToolAdminToolsToolNameGet(toolName, callback) {
      let postBody = null;
      // verify the required parameter 'toolName' is set
      if (toolName === undefined || toolName === null) {
        throw new Error("Missing the required parameter 'toolName' when calling getToolAdminToolsToolNameGet");
      }

      let pathParams = {
        'tool_name': toolName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ToolOutput;
      return this.apiClient.callApi(
        '/admin/tools/{tool_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getToolApiToolsToolIdGet operation.
     * @callback module:api/ToolsApi~getToolApiToolsToolIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ToolOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Tool
     * Get a tool by name
     * @param {String} toolId 
     * @param {module:api/ToolsApi~getToolApiToolsToolIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ToolOutput}
     */
    getToolApiToolsToolIdGet(toolId, callback) {
      let postBody = null;
      // verify the required parameter 'toolId' is set
      if (toolId === undefined || toolId === null) {
        throw new Error("Missing the required parameter 'toolId' when calling getToolApiToolsToolIdGet");
      }

      let pathParams = {
        'tool_id': toolId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ToolOutput;
      return this.apiClient.callApi(
        '/api/tools/{tool_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getToolIdApiToolsNameToolNameGet operation.
     * @callback module:api/ToolsApi~getToolIdApiToolsNameToolNameGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Tool Id
     * Get a tool by name
     * @param {String} toolName 
     * @param {module:api/ToolsApi~getToolIdApiToolsNameToolNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getToolIdApiToolsNameToolNameGet(toolName, callback) {
      let postBody = null;
      // verify the required parameter 'toolName' is set
      if (toolName === undefined || toolName === null) {
        throw new Error("Missing the required parameter 'toolName' when calling getToolIdApiToolsNameToolNameGet");
      }

      let pathParams = {
        'tool_name': toolName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/tools/name/{tool_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllToolsAdminToolsGet operation.
     * @callback module:api/ToolsApi~listAllToolsAdminToolsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListToolsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Tools
     * Get a list of all tools available to agents created by a user
     * @param {module:api/ToolsApi~listAllToolsAdminToolsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListToolsResponse}
     */
    listAllToolsAdminToolsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListToolsResponse;
      return this.apiClient.callApi(
        '/admin/tools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllToolsApiToolsGet operation.
     * @callback module:api/ToolsApi~listAllToolsApiToolsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ToolOutput>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Tools
     * Get a list of all tools available to agents created by a user
     * @param {module:api/ToolsApi~listAllToolsApiToolsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ToolOutput>}
     */
    listAllToolsApiToolsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ToolOutput];
      return this.apiClient.callApi(
        '/api/tools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateToolApiToolsToolIdPost operation.
     * @callback module:api/ToolsApi~updateToolApiToolsToolIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ToolOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Tool
     * Update an existing tool
     * @param {String} toolId 
     * @param {module:model/ToolUpdate} toolUpdate 
     * @param {module:api/ToolsApi~updateToolApiToolsToolIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ToolOutput}
     */
    updateToolApiToolsToolIdPost(toolId, toolUpdate, callback) {
      let postBody = toolUpdate;
      // verify the required parameter 'toolId' is set
      if (toolId === undefined || toolId === null) {
        throw new Error("Missing the required parameter 'toolId' when calling updateToolApiToolsToolIdPost");
      }
      // verify the required parameter 'toolUpdate' is set
      if (toolUpdate === undefined || toolUpdate === null) {
        throw new Error("Missing the required parameter 'toolUpdate' when calling updateToolApiToolsToolIdPost");
      }

      let pathParams = {
        'tool_id': toolId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ToolOutput;
      return this.apiClient.callApi(
        '/api/tools/{tool_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
