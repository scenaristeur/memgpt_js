/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIKey from '../model/APIKey';
import APIKeyCreate from '../model/APIKeyCreate';
import HTTPValidationError from '../model/HTTPValidationError';
import User from '../model/User';
import UserCreate from '../model/UserCreate';

/**
* Admin service.
* @module api/AdminApi
* @version 0.1.0
*/
export default class AdminApi {

    /**
    * Constructs a new AdminApi. 
    * @alias module:api/AdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createNewApiKeyAdminUsersKeysPost operation.
     * @callback module:api/AdminApi~createNewApiKeyAdminUsersKeysPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create New Api Key
     * Create a new API key for a user
     * @param {module:model/APIKeyCreate} aPIKeyCreate 
     * @param {module:api/AdminApi~createNewApiKeyAdminUsersKeysPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIKey}
     */
    createNewApiKeyAdminUsersKeysPost(aPIKeyCreate, callback) {
      let postBody = aPIKeyCreate;
      // verify the required parameter 'aPIKeyCreate' is set
      if (aPIKeyCreate === undefined || aPIKeyCreate === null) {
        throw new Error("Missing the required parameter 'aPIKeyCreate' when calling createNewApiKeyAdminUsersKeysPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = APIKey;
      return this.apiClient.callApi(
        '/admin/users/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUserAdminUsersPost operation.
     * @callback module:api/AdminApi~createUserAdminUsersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create User
     * Create a new user in the database
     * @param {module:model/UserCreate} userCreate 
     * @param {module:api/AdminApi~createUserAdminUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    createUserAdminUsersPost(userCreate, callback) {
      let postBody = userCreate;
      // verify the required parameter 'userCreate' is set
      if (userCreate === undefined || userCreate === null) {
        throw new Error("Missing the required parameter 'userCreate' when calling createUserAdminUsersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/admin/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiKeyAdminUsersKeysDelete operation.
     * @callback module:api/AdminApi~deleteApiKeyAdminUsersKeysDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Api Key
     * @param {String} apiKey The API key to be deleted.
     * @param {module:api/AdminApi~deleteApiKeyAdminUsersKeysDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIKey}
     */
    deleteApiKeyAdminUsersKeysDelete(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling deleteApiKeyAdminUsersKeysDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'api_key': apiKey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIKey;
      return this.apiClient.callApi(
        '/admin/users/keys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserAdminUsersDelete operation.
     * @callback module:api/AdminApi~deleteUserAdminUsersDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User
     * @param {String} userId The user_id key to be deleted.
     * @param {module:api/AdminApi~deleteUserAdminUsersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    deleteUserAdminUsersDelete(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserAdminUsersDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'user_id': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/admin/users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllUsersAdminUsersGet operation.
     * @callback module:api/AdminApi~getAllUsersAdminUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Users
     * Get a list of all users in the database
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] 
     * @param {Number} [limit] 
     * @param {module:api/AdminApi~getAllUsersAdminUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    getAllUsersAdminUsersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/admin/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiKeysAdminUsersKeysGet operation.
     * @callback module:api/AdminApi~getApiKeysAdminUsersKeysGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/APIKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Api Keys
     * Get a list of all API keys for a user
     * @param {String} userId The unique identifier of the user.
     * @param {module:api/AdminApi~getApiKeysAdminUsersKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/APIKey>}
     */
    getApiKeysAdminUsersKeysGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getApiKeysAdminUsersKeysGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'user_id': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [APIKey];
      return this.apiClient.callApi(
        '/admin/users/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
