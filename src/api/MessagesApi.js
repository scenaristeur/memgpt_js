/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateMessageRequest from '../model/CreateMessageRequest';
import HTTPValidationError from '../model/HTTPValidationError';
import ListMessagesResponse from '../model/ListMessagesResponse';
import MessageFile from '../model/MessageFile';
import ModifyMessageRequest from '../model/ModifyMessageRequest';
import OpenAIMessage from '../model/OpenAIMessage';

/**
* Messages service.
* @module api/MessagesApi
* @version 0.1.0
*/
export default class MessagesApi {

    /**
    * Constructs a new MessagesApi. 
    * @alias module:api/MessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMessageV1ThreadsThreadIdMessagesPost operation.
     * @callback module:api/MessagesApi~createMessageV1ThreadsThreadIdMessagesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAIMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Message
     * @param {String} threadId The unique identifier of the thread.
     * @param {module:model/CreateMessageRequest} createMessageRequest 
     * @param {module:api/MessagesApi~createMessageV1ThreadsThreadIdMessagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAIMessage}
     */
    createMessageV1ThreadsThreadIdMessagesPost(threadId, createMessageRequest, callback) {
      let postBody = createMessageRequest;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling createMessageV1ThreadsThreadIdMessagesPost");
      }
      // verify the required parameter 'createMessageRequest' is set
      if (createMessageRequest === undefined || createMessageRequest === null) {
        throw new Error("Missing the required parameter 'createMessageRequest' when calling createMessageV1ThreadsThreadIdMessagesPost");
      }

      let pathParams = {
        'thread_id': threadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OpenAIMessage;
      return this.apiClient.callApi(
        '/v1/threads/{thread_id}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMessagesV1ThreadsThreadIdMessagesGet operation.
     * @callback module:api/MessagesApi~listMessagesV1ThreadsThreadIdMessagesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Messages
     * @param {String} threadId The unique identifier of the thread.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 1000)] How many messages to retrieve.
     * @param {String} [order = 'asc')] Order of messages to retrieve (either 'asc' or 'desc').
     * @param {String} [after] A cursor for use in pagination. `after` is an object ID that defines your place in the list.
     * @param {String} [before] A cursor for use in pagination. `after` is an object ID that defines your place in the list.
     * @param {module:api/MessagesApi~listMessagesV1ThreadsThreadIdMessagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMessagesResponse}
     */
    listMessagesV1ThreadsThreadIdMessagesGet(threadId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling listMessagesV1ThreadsThreadIdMessagesGet");
      }

      let pathParams = {
        'thread_id': threadId
      };
      let queryParams = {
        'limit': opts['limit'],
        'order': opts['order'],
        'after': opts['after'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMessagesResponse;
      return this.apiClient.callApi(
        '/v1/threads/{thread_id}/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyMessageV1ThreadsThreadIdMessagesMessageIdPost operation.
     * @callback module:api/MessagesApi~modifyMessageV1ThreadsThreadIdMessagesMessageIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAIMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify Message
     * @param {String} threadId The unique identifier of the thread.
     * @param {String} messageId The unique identifier of the message.
     * @param {module:model/ModifyMessageRequest} modifyMessageRequest 
     * @param {module:api/MessagesApi~modifyMessageV1ThreadsThreadIdMessagesMessageIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAIMessage}
     */
    modifyMessageV1ThreadsThreadIdMessagesMessageIdPost(threadId, messageId, modifyMessageRequest, callback) {
      let postBody = modifyMessageRequest;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling modifyMessageV1ThreadsThreadIdMessagesMessageIdPost");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling modifyMessageV1ThreadsThreadIdMessagesMessageIdPost");
      }
      // verify the required parameter 'modifyMessageRequest' is set
      if (modifyMessageRequest === undefined || modifyMessageRequest === null) {
        throw new Error("Missing the required parameter 'modifyMessageRequest' when calling modifyMessageV1ThreadsThreadIdMessagesMessageIdPost");
      }

      let pathParams = {
        'thread_id': threadId,
        'message_id': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OpenAIMessage;
      return this.apiClient.callApi(
        '/v1/threads/{thread_id}/messages/{message_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveMessageFileV1ThreadsThreadIdMessagesMessageIdFilesFileIdGet operation.
     * @callback module:api/MessagesApi~retrieveMessageFileV1ThreadsThreadIdMessagesMessageIdFilesFileIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Message File
     * @param {String} threadId The unique identifier of the thread.
     * @param {String} messageId The unique identifier of the message.
     * @param {String} fileId The unique identifier of the file.
     * @param {module:api/MessagesApi~retrieveMessageFileV1ThreadsThreadIdMessagesMessageIdFilesFileIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageFile}
     */
    retrieveMessageFileV1ThreadsThreadIdMessagesMessageIdFilesFileIdGet(threadId, messageId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'threadId' is set
      if (threadId === undefined || threadId === null) {
        throw new Error("Missing the required parameter 'threadId' when calling retrieveMessageFileV1ThreadsThreadIdMessagesMessageIdFilesFileIdGet");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling retrieveMessageFileV1ThreadsThreadIdMessagesMessageIdFilesFileIdGet");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling retrieveMessageFileV1ThreadsThreadIdMessagesMessageIdFilesFileIdGet");
      }

      let pathParams = {
        'thread_id': threadId,
        'message_id': messageId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageFile;
      return this.apiClient.callApi(
        '/v1/threads/{thread_id}/messages/{message_id}/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
