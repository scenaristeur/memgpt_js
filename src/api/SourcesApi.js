/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Document from '../model/Document';
import HTTPValidationError from '../model/HTTPValidationError';
import Job from '../model/Job';
import Passage from '../model/Passage';
import Source from '../model/Source';
import SourceCreate from '../model/SourceCreate';
import SourceUpdate from '../model/SourceUpdate';

/**
* Sources service.
* @module api/SourcesApi
* @version 0.1.0
*/
export default class SourcesApi {

    /**
    * Constructs a new SourcesApi. 
    * @alias module:api/SourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the attachSourceToAgentApiSourcesSourceIdAttachPost operation.
     * @callback module:api/SourcesApi~attachSourceToAgentApiSourcesSourceIdAttachPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Source} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach Source To Agent
     * Attach a data source to an existing agent.
     * @param {String} sourceId 
     * @param {String} agentId The unique identifier of the agent to attach the source to.
     * @param {module:api/SourcesApi~attachSourceToAgentApiSourcesSourceIdAttachPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Source}
     */
    attachSourceToAgentApiSourcesSourceIdAttachPost(sourceId, agentId, callback) {
      let postBody = null;
      // verify the required parameter 'sourceId' is set
      if (sourceId === undefined || sourceId === null) {
        throw new Error("Missing the required parameter 'sourceId' when calling attachSourceToAgentApiSourcesSourceIdAttachPost");
      }
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling attachSourceToAgentApiSourcesSourceIdAttachPost");
      }

      let pathParams = {
        'source_id': sourceId
      };
      let queryParams = {
        'agent_id': agentId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Source;
      return this.apiClient.callApi(
        '/api/sources/{source_id}/attach', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSourceApiSourcesPost operation.
     * @callback module:api/SourcesApi~createSourceApiSourcesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Source} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Source
     * Create a new data source.
     * @param {module:model/SourceCreate} sourceCreate 
     * @param {module:api/SourcesApi~createSourceApiSourcesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Source}
     */
    createSourceApiSourcesPost(sourceCreate, callback) {
      let postBody = sourceCreate;
      // verify the required parameter 'sourceCreate' is set
      if (sourceCreate === undefined || sourceCreate === null) {
        throw new Error("Missing the required parameter 'sourceCreate' when calling createSourceApiSourcesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Source;
      return this.apiClient.callApi(
        '/api/sources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSourceApiSourcesSourceIdDelete operation.
     * @callback module:api/SourcesApi~deleteSourceApiSourcesSourceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Source
     * Delete a data source.
     * @param {String} sourceId 
     * @param {module:api/SourcesApi~deleteSourceApiSourcesSourceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSourceApiSourcesSourceIdDelete(sourceId, callback) {
      let postBody = null;
      // verify the required parameter 'sourceId' is set
      if (sourceId === undefined || sourceId === null) {
        throw new Error("Missing the required parameter 'sourceId' when calling deleteSourceApiSourcesSourceIdDelete");
      }

      let pathParams = {
        'source_id': sourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/sources/{source_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detachSourceFromAgentApiSourcesSourceIdDetachPost operation.
     * @callback module:api/SourcesApi~detachSourceFromAgentApiSourcesSourceIdDetachPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detach Source From Agent
     * Detach a data source from an existing agent.
     * @param {String} sourceId 
     * @param {String} agentId The unique identifier of the agent to detach the source from.
     * @param {module:api/SourcesApi~detachSourceFromAgentApiSourcesSourceIdDetachPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    detachSourceFromAgentApiSourcesSourceIdDetachPost(sourceId, agentId, callback) {
      let postBody = null;
      // verify the required parameter 'sourceId' is set
      if (sourceId === undefined || sourceId === null) {
        throw new Error("Missing the required parameter 'sourceId' when calling detachSourceFromAgentApiSourcesSourceIdDetachPost");
      }
      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling detachSourceFromAgentApiSourcesSourceIdDetachPost");
      }

      let pathParams = {
        'source_id': sourceId
      };
      let queryParams = {
        'agent_id': agentId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/sources/{source_id}/detach', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobApiSourcesStatusJobIdGet operation.
     * @callback module:api/SourcesApi~getJobApiSourcesStatusJobIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Job
     * Get the status of a job.
     * @param {String} jobId 
     * @param {module:api/SourcesApi~getJobApiSourcesStatusJobIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Job}
     */
    getJobApiSourcesStatusJobIdGet(jobId, callback) {
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getJobApiSourcesStatusJobIdGet");
      }

      let pathParams = {
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Job;
      return this.apiClient.callApi(
        '/api/sources/status/{job_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourceApiSourcesSourceIdGet operation.
     * @callback module:api/SourcesApi~getSourceApiSourcesSourceIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Source} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Source
     * Get all sources
     * @param {String} sourceId 
     * @param {module:api/SourcesApi~getSourceApiSourcesSourceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Source}
     */
    getSourceApiSourcesSourceIdGet(sourceId, callback) {
      let postBody = null;
      // verify the required parameter 'sourceId' is set
      if (sourceId === undefined || sourceId === null) {
        throw new Error("Missing the required parameter 'sourceId' when calling getSourceApiSourcesSourceIdGet");
      }

      let pathParams = {
        'source_id': sourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Source;
      return this.apiClient.callApi(
        '/api/sources/{source_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourceIdByNameApiSourcesNameSourceNameGet operation.
     * @callback module:api/SourcesApi~getSourceIdByNameApiSourcesNameSourceNameGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Source Id By Name
     * Get a source by name
     * @param {String} sourceName 
     * @param {module:api/SourcesApi~getSourceIdByNameApiSourcesNameSourceNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getSourceIdByNameApiSourcesNameSourceNameGet(sourceName, callback) {
      let postBody = null;
      // verify the required parameter 'sourceName' is set
      if (sourceName === undefined || sourceName === null) {
        throw new Error("Missing the required parameter 'sourceName' when calling getSourceIdByNameApiSourcesNameSourceNameGet");
      }

      let pathParams = {
        'source_name': sourceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/sources/name/{source_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDocumentsApiSourcesSourceIdDocumentsGet operation.
     * @callback module:api/SourcesApi~listDocumentsApiSourcesSourceIdDocumentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Document>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Documents
     * List all documents associated with a data source.
     * @param {String} sourceId 
     * @param {module:api/SourcesApi~listDocumentsApiSourcesSourceIdDocumentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Document>}
     */
    listDocumentsApiSourcesSourceIdDocumentsGet(sourceId, callback) {
      let postBody = null;
      // verify the required parameter 'sourceId' is set
      if (sourceId === undefined || sourceId === null) {
        throw new Error("Missing the required parameter 'sourceId' when calling listDocumentsApiSourcesSourceIdDocumentsGet");
      }

      let pathParams = {
        'source_id': sourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Document];
      return this.apiClient.callApi(
        '/api/sources/{source_id}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPassagesApiSourcesSourceIdPassagesGet operation.
     * @callback module:api/SourcesApi~listPassagesApiSourcesSourceIdPassagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Passage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Passages
     * List all passages associated with a data source.
     * @param {String} sourceId 
     * @param {module:api/SourcesApi~listPassagesApiSourcesSourceIdPassagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Passage>}
     */
    listPassagesApiSourcesSourceIdPassagesGet(sourceId, callback) {
      let postBody = null;
      // verify the required parameter 'sourceId' is set
      if (sourceId === undefined || sourceId === null) {
        throw new Error("Missing the required parameter 'sourceId' when calling listPassagesApiSourcesSourceIdPassagesGet");
      }

      let pathParams = {
        'source_id': sourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Passage];
      return this.apiClient.callApi(
        '/api/sources/{source_id}/passages ', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSourcesApiSourcesGet operation.
     * @callback module:api/SourcesApi~listSourcesApiSourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Source>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Sources
     * List all data sources created by a user.
     * @param {module:api/SourcesApi~listSourcesApiSourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Source>}
     */
    listSourcesApiSourcesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Source];
      return this.apiClient.callApi(
        '/api/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSourceApiSourcesSourceIdPost operation.
     * @callback module:api/SourcesApi~updateSourceApiSourcesSourceIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Source} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Source
     * Update the name or documentation of an existing data source.
     * @param {String} sourceId 
     * @param {module:model/SourceUpdate} sourceUpdate 
     * @param {module:api/SourcesApi~updateSourceApiSourcesSourceIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Source}
     */
    updateSourceApiSourcesSourceIdPost(sourceId, sourceUpdate, callback) {
      let postBody = sourceUpdate;
      // verify the required parameter 'sourceId' is set
      if (sourceId === undefined || sourceId === null) {
        throw new Error("Missing the required parameter 'sourceId' when calling updateSourceApiSourcesSourceIdPost");
      }
      // verify the required parameter 'sourceUpdate' is set
      if (sourceUpdate === undefined || sourceUpdate === null) {
        throw new Error("Missing the required parameter 'sourceUpdate' when calling updateSourceApiSourcesSourceIdPost");
      }

      let pathParams = {
        'source_id': sourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Source;
      return this.apiClient.callApi(
        '/api/sources/{source_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFileToSourceApiSourcesSourceIdUploadPost operation.
     * @callback module:api/SourcesApi~uploadFileToSourceApiSourcesSourceIdUploadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload File To Source
     * Upload a file to a data source.
     * @param {String} sourceId 
     * @param {File} file 
     * @param {module:api/SourcesApi~uploadFileToSourceApiSourcesSourceIdUploadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Job}
     */
    uploadFileToSourceApiSourcesSourceIdUploadPost(sourceId, file, callback) {
      let postBody = null;
      // verify the required parameter 'sourceId' is set
      if (sourceId === undefined || sourceId === null) {
        throw new Error("Missing the required parameter 'sourceId' when calling uploadFileToSourceApiSourcesSourceIdUploadPost");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadFileToSourceApiSourcesSourceIdUploadPost");
      }

      let pathParams = {
        'source_id': sourceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Job;
      return this.apiClient.callApi(
        '/api/sources/{source_id}/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
