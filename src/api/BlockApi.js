/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Block from '../model/Block';
import CreateBlock from '../model/CreateBlock';
import HTTPValidationError from '../model/HTTPValidationError';
import UpdateBlock from '../model/UpdateBlock';

/**
* Block service.
* @module api/BlockApi
* @version 0.1.0
*/
export default class BlockApi {

    /**
    * Constructs a new BlockApi. 
    * @alias module:api/BlockApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBlockApiBlocksPost operation.
     * @callback module:api/BlockApi~createBlockApiBlocksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Block} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Block
     * @param {module:model/CreateBlock} createBlock 
     * @param {module:api/BlockApi~createBlockApiBlocksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Block}
     */
    createBlockApiBlocksPost(createBlock, callback) {
      let postBody = createBlock;
      // verify the required parameter 'createBlock' is set
      if (createBlock === undefined || createBlock === null) {
        throw new Error("Missing the required parameter 'createBlock' when calling createBlockApiBlocksPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Block;
      return this.apiClient.callApi(
        '/api/blocks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBlockApiBlocksBlockIdDelete operation.
     * @callback module:api/BlockApi~deleteBlockApiBlocksBlockIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Block} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Block
     * @param {String} blockId 
     * @param {module:api/BlockApi~deleteBlockApiBlocksBlockIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Block}
     */
    deleteBlockApiBlocksBlockIdDelete(blockId, callback) {
      let postBody = null;
      // verify the required parameter 'blockId' is set
      if (blockId === undefined || blockId === null) {
        throw new Error("Missing the required parameter 'blockId' when calling deleteBlockApiBlocksBlockIdDelete");
      }

      let pathParams = {
        'block_id': blockId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Block;
      return this.apiClient.callApi(
        '/api/blocks/{block_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockApiBlocksBlockIdGet operation.
     * @callback module:api/BlockApi~getBlockApiBlocksBlockIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Block} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Block
     * @param {String} blockId 
     * @param {module:api/BlockApi~getBlockApiBlocksBlockIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Block}
     */
    getBlockApiBlocksBlockIdGet(blockId, callback) {
      let postBody = null;
      // verify the required parameter 'blockId' is set
      if (blockId === undefined || blockId === null) {
        throw new Error("Missing the required parameter 'blockId' when calling getBlockApiBlocksBlockIdGet");
      }

      let pathParams = {
        'block_id': blockId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Block;
      return this.apiClient.callApi(
        '/api/blocks/{block_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBlocksApiBlocksGet operation.
     * @callback module:api/BlockApi~listBlocksApiBlocksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Block>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Blocks
     * @param {Object} opts Optional parameters
     * @param {String} [label] Labels to include (e.g. human, persona)
     * @param {Boolean} [templatesOnly = true)] Whether to include only templates
     * @param {String} [name] Name of the block
     * @param {module:api/BlockApi~listBlocksApiBlocksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Block>}
     */
    listBlocksApiBlocksGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'label': opts['label'],
        'templates_only': opts['templatesOnly'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Block];
      return this.apiClient.callApi(
        '/api/blocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBlockApiBlocksBlockIdPost operation.
     * @callback module:api/BlockApi~updateBlockApiBlocksBlockIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Block} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Block
     * @param {String} blockId 
     * @param {module:model/UpdateBlock} updateBlock 
     * @param {module:api/BlockApi~updateBlockApiBlocksBlockIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Block}
     */
    updateBlockApiBlocksBlockIdPost(blockId, updateBlock, callback) {
      let postBody = updateBlock;
      // verify the required parameter 'blockId' is set
      if (blockId === undefined || blockId === null) {
        throw new Error("Missing the required parameter 'blockId' when calling updateBlockApiBlocksBlockIdPost");
      }
      // verify the required parameter 'updateBlock' is set
      if (updateBlock === undefined || updateBlock === null) {
        throw new Error("Missing the required parameter 'updateBlock' when calling updateBlockApiBlocksBlockIdPost");
      }

      let pathParams = {
        'block_id': blockId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Block;
      return this.apiClient.callApi(
        '/api/blocks/{block_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
