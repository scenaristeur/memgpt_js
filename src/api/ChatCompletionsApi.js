/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChatCompletionRequest from '../model/ChatCompletionRequest';
import ChatCompletionResponse from '../model/ChatCompletionResponse';
import HTTPValidationError from '../model/HTTPValidationError';

/**
* ChatCompletions service.
* @module api/ChatCompletionsApi
* @version 0.1.0
*/
export default class ChatCompletionsApi {

    /**
    * Constructs a new ChatCompletionsApi. 
    * @alias module:api/ChatCompletionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createChatCompletionV1ChatCompletionsPost operation.
     * @callback module:api/ChatCompletionsApi~createChatCompletionV1ChatCompletionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChatCompletionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Chat Completion
     * Send a message to a MemGPT agent via a /chat/completions request  The bearer token will be used to identify the user. The 'user' field in the request should be set to the agent ID.
     * @param {module:model/ChatCompletionRequest} chatCompletionRequest 
     * @param {module:api/ChatCompletionsApi~createChatCompletionV1ChatCompletionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChatCompletionResponse}
     */
    createChatCompletionV1ChatCompletionsPost(chatCompletionRequest, callback) {
      let postBody = chatCompletionRequest;
      // verify the required parameter 'chatCompletionRequest' is set
      if (chatCompletionRequest === undefined || chatCompletionRequest === null) {
        throw new Error("Missing the required parameter 'chatCompletionRequest' when calling createChatCompletionV1ChatCompletionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HTTPBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChatCompletionResponse;
      return this.apiClient.callApi(
        '/v1/chat/completions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
