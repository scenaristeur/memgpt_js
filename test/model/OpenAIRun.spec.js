/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenAiAssistantsApi);
  }
}(this, function(expect, OpenAiAssistantsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenAiAssistantsApi.OpenAIRun();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OpenAIRun', function() {
    it('should create an instance of OpenAIRun', function() {
      // uncomment below and update the code to test OpenAIRun
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be.a(OpenAiAssistantsApi.OpenAIRun);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property object (base name: "object")', function() {
      // uncomment below and update the code to test the property object
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property threadId (base name: "thread_id")', function() {
      // uncomment below and update the code to test the property threadId
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property assistantId (base name: "assistant_id")', function() {
      // uncomment below and update the code to test the property assistantId
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property requiredAction (base name: "required_action")', function() {
      // uncomment below and update the code to test the property requiredAction
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property lastError (base name: "last_error")', function() {
      // uncomment below and update the code to test the property lastError
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property expiresAt (base name: "expires_at")', function() {
      // uncomment below and update the code to test the property expiresAt
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property startedAt (base name: "started_at")', function() {
      // uncomment below and update the code to test the property startedAt
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property cancelledAt (base name: "cancelled_at")', function() {
      // uncomment below and update the code to test the property cancelledAt
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property failedAt (base name: "failed_at")', function() {
      // uncomment below and update the code to test the property failedAt
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property completedAt (base name: "completed_at")', function() {
      // uncomment below and update the code to test the property completedAt
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property model (base name: "model")', function() {
      // uncomment below and update the code to test the property model
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property instructions (base name: "instructions")', function() {
      // uncomment below and update the code to test the property instructions
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property tools (base name: "tools")', function() {
      // uncomment below and update the code to test the property tools
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property fileIds (base name: "file_ids")', function() {
      // uncomment below and update the code to test the property fileIds
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

    it('should have the property usage (base name: "usage")', function() {
      // uncomment below and update the code to test the property usage
      //var instance = new OpenAiAssistantsApi.OpenAIRun();
      //expect(instance).to.be();
    });

  });

}));
