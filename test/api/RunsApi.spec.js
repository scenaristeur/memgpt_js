/**
 * OpenAI Assistants API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenAiAssistantsApi);
  }
}(this, function(expect, OpenAiAssistantsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenAiAssistantsApi.RunsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RunsApi', function() {
    describe('cancelRunV1ThreadsThreadIdRunsRunIdCancelPost', function() {
      it('should call cancelRunV1ThreadsThreadIdRunsRunIdCancelPost successfully', function(done) {
        //uncomment below and update the code to test cancelRunV1ThreadsThreadIdRunsRunIdCancelPost
        //instance.cancelRunV1ThreadsThreadIdRunsRunIdCancelPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRunV1ThreadsThreadIdRunsPost', function() {
      it('should call createRunV1ThreadsThreadIdRunsPost successfully', function(done) {
        //uncomment below and update the code to test createRunV1ThreadsThreadIdRunsPost
        //instance.createRunV1ThreadsThreadIdRunsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createThreadAndRunV1ThreadsRunsPost', function() {
      it('should call createThreadAndRunV1ThreadsRunsPost successfully', function(done) {
        //uncomment below and update the code to test createThreadAndRunV1ThreadsRunsPost
        //instance.createThreadAndRunV1ThreadsRunsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRunStepsV1ThreadsThreadIdRunsRunIdStepsGet', function() {
      it('should call listRunStepsV1ThreadsThreadIdRunsRunIdStepsGet successfully', function(done) {
        //uncomment below and update the code to test listRunStepsV1ThreadsThreadIdRunsRunIdStepsGet
        //instance.listRunStepsV1ThreadsThreadIdRunsRunIdStepsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRunsV1ThreadsThreadIdRunsGet', function() {
      it('should call listRunsV1ThreadsThreadIdRunsGet successfully', function(done) {
        //uncomment below and update the code to test listRunsV1ThreadsThreadIdRunsGet
        //instance.listRunsV1ThreadsThreadIdRunsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyRunV1ThreadsThreadIdRunsRunIdPost', function() {
      it('should call modifyRunV1ThreadsThreadIdRunsRunIdPost successfully', function(done) {
        //uncomment below and update the code to test modifyRunV1ThreadsThreadIdRunsRunIdPost
        //instance.modifyRunV1ThreadsThreadIdRunsRunIdPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveRunStepV1ThreadsThreadIdRunsRunIdStepsStepIdGet', function() {
      it('should call retrieveRunStepV1ThreadsThreadIdRunsRunIdStepsStepIdGet successfully', function(done) {
        //uncomment below and update the code to test retrieveRunStepV1ThreadsThreadIdRunsRunIdStepsStepIdGet
        //instance.retrieveRunStepV1ThreadsThreadIdRunsRunIdStepsStepIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveRunV1ThreadsThreadIdRunsRunIdGet', function() {
      it('should call retrieveRunV1ThreadsThreadIdRunsRunIdGet successfully', function(done) {
        //uncomment below and update the code to test retrieveRunV1ThreadsThreadIdRunsRunIdGet
        //instance.retrieveRunV1ThreadsThreadIdRunsRunIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitToolOutputsToRunV1ThreadsThreadIdRunsRunIdSubmitToolOutputsPost', function() {
      it('should call submitToolOutputsToRunV1ThreadsThreadIdRunsRunIdSubmitToolOutputsPost successfully', function(done) {
        //uncomment below and update the code to test submitToolOutputsToRunV1ThreadsThreadIdRunsRunIdSubmitToolOutputsPost
        //instance.submitToolOutputsToRunV1ThreadsThreadIdRunsRunIdSubmitToolOutputsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
